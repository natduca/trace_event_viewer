#!/usr/bin/env python
# Copyright 2011 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import logging
import optparse
import os
import platform
import re
import sys

import src.browser as browser
import src.deps as deps
import src.frontend_download as frontend_download
import src.frontend_daemon_host as frontend_daemon_host
import src.message_loop as message_loop
import src.chrome_shim as chrome_shim

def main(args):
  usage = "Usage: %prog [options] trace_file"
  parser = optparse.OptionParser(usage=usage)
  parser.add_option(
      '-v', '--verbose', action='count', default=0,
      help='Increase verbosity level (repeat as needed)')
  (options, args) = parser.parse_args()

  if options.verbose >= 2:
    logging.basicConfig(level=logging.DEBUG)
  elif options.verbose:
    logging.basicConfig(level=logging.INFO)
  else:
    logging.basicConfig(level=logging.WARNING)

  if len(args) > 1:
    print "Can only load one file at a time"
    return 255
  if len(args) == 0:
    print "Expected: trace_file."
    return 255
  trace_data = open(args[0]).read()

  host = None
  try:
    dl = frontend_download.FrontendDownload(deps.CHROME_SVN_BASE, deps.CHROME_SVN_REV)
    host = frontend_daemon_host.FrontendDaemonHost(23252, dl.data_dir)
    b = browser.Browser()
    shim = chrome_shim.ChromeShim(b)
    b.load_url(host.baseurl)
    b.show()
    if len(args) == 1:
      def do_load():
        res = b.run_javascript("loadTrace(JSON.parse('%s'))" % trace_data);
        if res != 'true':
          raise Exception('LoadTrace failed with %s', res)
      shim.add_event_listener('ready', do_load)
    message_loop.run_main_loop()
  finally:
    if host:
      host.close() # prevent host from leaking its daemon
  return 0

if __name__ == '__main__':
  os.chdir(os.path.dirname(__file__))
  if platform.system() == 'Darwin':
    if os.getenv('VERSIONER_PYTHON_PREFER_32_BIT') != 'yes':
      os.putenv('VERSIONER_PYTHON_PREFER_32_BIT', 'yes')
      args = [sys.executable]
      args.extend(sys.argv)
      os.execv(args[0], args)
    else:
      sys.exit(main(sys.argv[1:]))
  else:
    sys.exit(main(sys.argv[1:]))
